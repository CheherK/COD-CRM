// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  password    String
  firstName   String?
  lastName    String?
  phone       String?
  role        Role     @default(STAFF)
  permissions Json?
  status      UserStatus @default(ENABLED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders      Order[]
  activities  Activity[]
  statusHistory OrderStatusHistory[]

  @@map("users")
}

model Order {
  id              String      @id @default(cuid())
  customerName    String
  customerPhone1  String      // Primary phone (mandatory)
  customerPhone2  String?     // Secondary phone (optional)
  customerEmail   String?
  customerAddress String
  customerCity    String
  status          OrderStatus @default(PENDING)
  deliveryCompany String?
  total           Decimal     @db.Decimal(10, 2)
  deliveryPrice   Decimal?    @db.Decimal(10, 2)
  notes           String?
  attemptCount    Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  items           OrderItem[]
  assignedTo      User?       @relation(fields: [assignedToId], references: [id])
  assignedToId    String?
  statusHistory   OrderStatusHistory[]
  shipments       DeliveryShipment[]

  @@map("orders")
}

model Product {
  id          String @id @default(cuid())
  shopifyId   String @unique  // Shopify product ID for sync
  name        String
  nameEn      String
  nameFr      String
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems  OrderItem[]

  @@map("products")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("order_items")
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  description String
  userId    String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activities")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())

  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?

  @@map("order_status_history")
}

model DeliveryAgency {
  id               String   @id @default(cuid())
  name             String
  enabled          Boolean  @default(false)
  credentialsType  CredentialsType
  credentialsUsername String?
  credentialsEmail String?
  credentialsPassword String?
  credentialsApiKey String?
  settings         Json
  webhookUrl       String?
  pollingInterval  Int      @default(30)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  shipments        DeliveryShipment[]

  @@map("delivery_agencies")
}

model DeliveryShipment {
  id               String   @id @default(cuid())
  orderId          String
  agencyId         String
  trackingNumber   String
  barcode          String?
  status           String
  lastStatusUpdate DateTime
  printUrl         String?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  agency           DeliveryAgency @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  statusLogs       DeliveryStatusLog[]

  @@unique([orderId, agencyId])
  @@index([trackingNumber])
  @@index([status])
  @@map("delivery_shipments")
}

model DeliveryStatusLog {
  id          String   @id @default(cuid())
  shipmentId  String
  status      String
  statusCode  Int?
  message     String
  timestamp   DateTime
  source      LogSource
  rawData     Json?
  createdAt   DateTime @default(now())

  shipment    DeliveryShipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
  @@index([timestamp])
  @@map("delivery_status_logs")
}

enum Role {
  ADMIN
  STAFF
}

enum UserStatus {
  ENABLED
  DISABLED
}

enum OrderStatus {
  PENDING      // First status when order is created
  CONFIRMED    // Customer confirms the order
  DELETED      // Fake/invalid order
  ARCHIVED     // Old completed orders
  REJECTED     // Customer rejects after confirmation call
  DELIVERED    // Successfully delivered
  RETURNED     // Customer didn't answer, order returned
  ATTEMPT      // Delivery attempt
  UPLOADED     // Sent to delivery agency (was confirmed)
  DEPOSIT      // Delivery agency picked up from our site
  IN_TRANSIT   // Currently being shipped by delivery agency
  PROCESSING   // Order being processed
  SHIPPED      // Order has been shipped
  CANCELLED    // Order cancelled
}

enum CredentialsType {
  username_password
  email_password
  api_key
}

enum LogSource {
  api
  webhook
  manual
}