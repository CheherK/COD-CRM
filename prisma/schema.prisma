generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String              @id @default(cuid())
  username      String              @unique
  email         String              @unique
  password      String
  firstName     String?
  lastName      String?
  phone         String?
  role          Role                @default(STAFF)
  permissions   Json?
  status        UserStatus          @default(ENABLED)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  orders        Order[]
  activities    Activity[]
  statusHistory OrderStatusHistory[]

  // Add indexes for common queries
  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

model Order {
  id              String              @id @default(cuid())
  shopifyId       String?             @unique // Shopify order ID for sync
  customerName    String
  customerPhone1  String              // Primary phone (mandatory)
  customerPhone2  String?             // Secondary phone (optional)
  customerEmail   String?
  customerAddress String
  customerCity    String
  status          OrderStatus         @default(PENDING)
  deliveryCompany String?
  total           Decimal             @db.Decimal(10, 2)
  deliveryPrice   Decimal?            @db.Decimal(10, 2)
  notes           String?
  attemptCount    Int                 @default(0) // number of call attempts
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  items           OrderItem[]
  confirmedBy     User?               @relation(fields: [confirmedById], references: [id], onDelete: SetNull)
  confirmedById   String?
  statusHistory   OrderStatusHistory[]
  shipments       DeliveryShipment[]

  // CRITICAL PERFORMANCE INDEXES
  @@index([createdAt(sort: Desc)]) // Most important for recent orders
  @@index([status, createdAt(sort: Desc)]) // Combined index for status filtering
  @@index([customerPhone1]) // For phone search
  @@index([customerName]) // For name search
  @@index([customerCity]) // For city filtering
  @@index([confirmedById]) // For user filtering
  @@index([updatedAt]) // For updated orders
  @@index([status, updatedAt]) // Combined for status + recently updated
  @@map("orders")
}

model Product {
  id          String    @id @default(cuid())
  shopifyId   String    @unique // Shopify product ID for sync
  name        String
  nameEn      String
  nameFr      String
  price       Decimal   @db.Decimal(10, 2)
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orderItems  OrderItem[]

  // Add indexes for product queries
  @@index([isActive, createdAt(sort: Desc)]) // Most common query
  @@index([name]) // For product name filtering
  @@index([shopifyId]) // Already unique but helps with sync
  @@map("products")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  // Critical indexes for order items
  @@index([orderId]) // For fetching items by order
  @@index([productId]) // For product aggregations
  @@index([orderId, productId]) // Composite for unique combinations
  @@map("order_items")
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  userId      String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes for activity queries
  @@index([userId, timestamp(sort: Desc)]) // User activity history
  @@index([type, timestamp(sort: Desc)]) // Activity type filtering
  @@index([timestamp(sort: Desc)]) // Recent activities
  @@map("activities")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())

  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?

  // Critical indexes for status history
  @@index([orderId, createdAt]) // Order history chronological
  @@index([status, createdAt]) // Status timeline
  @@index([userId, createdAt]) // User activity
  @@map("order_status_history")
}

model DeliveryAgency {
  id                  String   @id @default(cuid())
  name                String
  enabled             Boolean  @default(false)
  supportedRegions    String[]
  credentialsType     CredentialsType
  credentialsUsername String?
  credentialsEmail    String?
  credentialsPassword String?
  credentialsApiKey   String?
  settings            Json
  webhookUrl          String?
  pollingInterval     Int      @default(30)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  shipments           DeliveryShipment[]

  // Indexes for agency queries
  @@index([enabled]) // Only enabled agencies
  @@index([name]) // Agency name search
  @@map("delivery_agencies")
}

model DeliveryShipment {
  id               String         @id @default(cuid())
  orderId          String
  agencyId         String
  trackingNumber   String
  barcode          String?
  status           DeliveryStatus // new enum for delivery stage
  lastStatusUpdate DateTime
  printUrl         String?
  metadata         Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  agency           DeliveryAgency @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  statusLogs       DeliveryStatusLog[]

  @@unique([orderId, agencyId])
  // CRITICAL: Optimized indexes for shipment queries
  @@index([orderId]) // Most common lookup
  @@index([trackingNumber]) // Tracking lookup
  @@index([status, lastStatusUpdate]) // Status filtering with recency
  @@index([agencyId, status]) // Agency-specific status queries
  @@index([lastStatusUpdate(sort: Desc)]) // Recent updates
  @@map("delivery_shipments")
}

model DeliveryStatusLog {
  id          String           @id @default(cuid())
  shipmentId  String
  status      DeliveryStatus
  statusCode  Int?
  message     String
  timestamp   DateTime
  source      LogSource
  rawData     Json?
  createdAt   DateTime         @default(now())

  shipment    DeliveryShipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  // Indexes for status log queries
  @@index([shipmentId, timestamp(sort: Desc)]) // Shipment status timeline
  @@index([timestamp(sort: Desc)]) // Recent logs
  @@index([status, timestamp]) // Status filtering
  @@index([source, timestamp]) // Source filtering
  @@map("delivery_status_logs")
}

// Enums remain the same
enum Role {
  ADMIN
  STAFF
}

enum UserStatus {
  ENABLED
  DISABLED
}

enum OrderStatus {
  PENDING     // Created from Shopify form
  ABANDONED   // User left without submitting order
  ATTEMPTED   // At least one call attempt made - we have attempt count on order
  CONFIRMED   // Client confirms order (can also be created directly in CRM)
  UPLOADED    // Order uploaded to delivery agency (still in our inventory)
  DELETED     // Fake/duplicate order
  REJECTED    // Client rejects after confirmation call
  ARCHIVED    // Manually archived

  DEPOSIT     // Agency picked up (in their inventory)
  IN_TRANSIT  // Shipping in progress
  DELIVERED   // Successfully delivered
  RETURNED    // Delivery failed, order returned
}

enum DeliveryStatus {
  UPLOADED    // Order uploaded to delivery agency (still in our inventory)
  DEPOSIT     // Agency picked up (in their inventory)
  IN_TRANSIT  // Shipping in progress
  DELIVERED   // Successfully delivered
  RETURNED    // Delivery failed, order returned
}

enum CredentialsType {
  username_password 
  email_password
  api_key
}

enum LogSource {
  api
  webhook
  manual
}