// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  password    String
  firstName   String?
  lastName    String?
  phone       String?
  role        Role     @default(STAFF)
  permissions Json?
  status      UserStatus @default(ENABLED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders      Order[]
  activities  UserActivity[]
  statusHistory OrderStatusHistory[]

  @@map("users")
}

model Order {
  id              String      @id @default(cuid())
  customerName    String
  customerPhone   String
  customerEmail   String?
  customerAddress String
  customerCity    String
  status          OrderStatus @default(PENDING)
  deliveryCompany String?
  total           Decimal
  deliveryPrice   Decimal?
  notes           String?
  attemptCount    Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  items           OrderItem[]
  assignedTo      User?       @relation(fields: [assignedToId], references: [id])
  assignedToId    String?
  statusHistory   OrderStatusHistory[]

  @@map("orders")
}

model Product {
  id          String @id @default(cuid())
  shopifyId   String @unique  // Shopify product ID for sync
  name        String
  nameEn      String
  nameFr      String
  price       Decimal
  imageUrl    String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems  OrderItem[]

  @@map("products")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Decimal

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("order_items")
}

model UserActivity {
  id        String   @id @default(cuid())
  action    String
  details   String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("user_activities")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())

  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?

  @@map("order_status_history")
}

enum Role {
  ADMIN
  STAFF
}

enum UserStatus {
  ENABLED
  DISABLED
}

enum OrderStatus {
  PENDING      // First status when order is created
  CONFIRMED    // Customer confirms the order
  DELETED      // Fake/invalid order
  ARCHIVED     // Old completed orders
  REJECTED     // Customer rejects after confirmation call
  DELIVERED    // Successfully delivered
  RETURNED     // Customer didn't answer, order returned
  ATTEMPT_1    // First delivery attempt
  ATTEMPT_2    // Second delivery attempt
  ATTEMPT_3    // Third delivery attempt
  UPLOADED     // Sent to delivery agency (was confirmed)
  DEPOSIT      // Delivery agency picked up from our site
  IN_TRANSIT   // Currently being shipped by delivery agency
}
